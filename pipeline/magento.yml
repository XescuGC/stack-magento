shared:

  # Task : sync and merge with rsync 2 rep. Used to merge stack and config
  - &merge-stack-and-config
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: cycloid/cycloid-toolkit
        tag: latest
    run:
      path: /usr/bin/merge-stack-and-config
    outputs:
    - name: merged-stack
      path: "merged-stack"

  # Task : connect on the bastion server and run ansible from it
  - &run-ansible-from-bastion
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cycloid/cycloid-toolkit
          tag: latest
      run:
        path: /usr/bin/ansible-runner
      caches:
        - path: ansible-playbook/roles
      inputs:
      - name: merged-stack
        path: ansible-playbook

groups:

- name: overview
  jobs:
  - build
  - full-deploy-front
  - app-deploy-front
  - terraform-plan
  - terraform-apply
  - unittests
  - functional-tests
- name: destroy
  jobs:
  - terraform-destroy

resource_types:

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

resources:

- name: terraform-magento-((env))
  type: terraform
  source:
    storage:
      bucket: ((terraform_storage_bucket_name))
      bucket_path: ((terraform_storage_bucket_path))
      region_name: ((aws_default_region))
      access_key_id: ((aws_access_key))
      secret_access_key: ((aws_secret_key))
    vars:
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
      customer: ((customer))
      env: ((env))
      project: ((project))
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
      AWS_DEFAULT_REGION: ((aws_default_region))

- name: magento-release
  type: s3
  source:
    bucket: ((magento_deploy_bucket_name))
    #regexp: magento/((env))/magento-((env)).tar.gz
    versioned_file: ((magento_deploy_bucket_object_path))
    private: true
    region_name: ((aws_default_region))
    access_key_id: ((aws_access_key))
    secret_access_key: ((aws_secret_key))

- name: stack-magento-ansible
  type: git
  source:
    uri: https://github.com/cycloid-community-catalog/stack-magento
    branch: master
    check_every: 2m
    paths:
      - ansible/*

- name: catalog-config-ansible
  type: git
  source:
    uri: ((magento_config_git_repository))
    branch: ((magento_config_git_branch))
    check_every: 2m
    private_key: ((magento_config_git_private_key))
    paths:
      - magento/ansible/*

- name: stack-magento-terraform
  type: git
  source:
    uri: https://github.com/cycloid-community-catalog/stack-magento
    branch: master
    check_every: 2m
    paths:
      - terraform/*

- name: catalog-config-terraform
  type: git
  source:
    uri: ((magento_config_git_repository))
    branch: ((magento_config_git_branch))
    check_every: 2m
    private_key: ((magento_config_git_private_key))
    paths:
      - magento/terraform/*

- name: magento-code
  type: git
  source:
    uri: ((magento_git_repository))
    branch: ((magento_git_branch))
    check_every: 2m
    private_key: ((magento_git_private_key))


jobs:
  - name: terraform-plan
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - do:
        - get: stack-magento-terraform
          trigger: true
        - get: catalog-config-terraform
          trigger: true

        - task: merge-stack-and-config
          config:
            <<: *merge-stack-and-config
            inputs:
            - name: catalog-config-terraform
              path: "config"
            - name: stack-magento-terraform
              path: "stack"
          params:
            CONFIG_PATH: magento/terraform/((env))
            STACK_PATH: terraform

        - put: terraform-magento-((env))
          params:
            env_name: magento-((env))
            plan_only: true
            terraform_source: merged-stack/

  - name: terraform-apply
    build_logs_to_retain: 10
    plan:
      - do:
        # Get the PR on the project #
        - get: stack-magento-terraform
          trigger: false
          passed:
            - terraform-plan
        - get: catalog-config-terraform
          trigger: false
          passed:
            - terraform-plan
        - get: terraform-magento-((env))
          trigger: false
          passed:
            - terraform-plan

        - task: merge-stack-and-config
          config:
            <<: *merge-stack-and-config
            inputs:
            - name: catalog-config-terraform
              path: "config"
            - name: stack-magento-terraform
              path: "stack"
          params:
            CONFIG_PATH: magento/terraform/((env))
            STACK_PATH: terraform

        - put: terraform-magento-((env))
          params:
            env_name: magento-((env))
            run_plan: true
            terraform_source: merged-stack/

  - name: terraform-destroy
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - do:
          - get: stack-magento-terraform
            trigger: false
          - get: catalog-config-terraform
            trigger: false
          - task: merge-stack-and-config
            config:
              <<: *merge-stack-and-config
              inputs:
              - name: catalog-config-terraform
                path: "config"
              - name: stack-magento-terraform
                path: "stack"
            params:
              CONFIG_PATH: magento/terraform/((env))
              STACK_PATH: terraform

          - put: terraform-magento-((env))
            params:
              action: destroy
              env_name: magento-((env))
              terraform_source: merged-stack/
            get_params:
              action: destroy

  - name: build
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
    - do:
      - get: magento-code
        trigger: true

      - task: build-release
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/composer
              tag: latest
          run:
            path: /bin/bash
            args:
            - -xec
            - |
              DIR=${PWD}

              echo "### Build release"
              cd ${DIR}/code

              composer install --optimize-autoloader --ignore-platform-reqs

              php bin/magento module:enable --all

              php bin/magento setup:di:compile -v

              echo "# create the archive release"
              cd ${DIR}
              tar zcf ${PWD}/release/magento-release.tar.gz code
          # params:
          inputs:
          - name: magento-code
            path: code
          outputs:
          - name: release
            path: "release"
      - put: magento-release
        params:
          acl: private
          file: release/magento-release.tar.gz

  - name: unittests
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
    - do:
      - get: magento-release
        trigger: true
        passed: [build]
      - get: magento-code
        passed: [build]
        trigger: false

      - task: run
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/busybox
              tag: latest
          run:
            path: /bin/bash
            args:
            - -xec
            - |
              DIR=${PWD}
              echo "Dummy tests OK"

  - name: full-deploy-front
    build_logs_to_retain: 10
    plan:
    - do:

      - get: terraform-magento-((env))
        trigger: true
        passed:
          - terraform-apply

      - get: stack-magento-ansible
        trigger: true
      - get: catalog-config-ansible
        trigger: true

      - get: magento-release
        trigger: false
        passed: [unittests]

      - get: magento-code
        passed: [unittests]
        trigger: false

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: catalog-config-ansible
            path: "config"
          - name: stack-magento-ansible
            path: "stack"
          - name: terraform-magento-((env))
            path: "terraform"
        params:
          CONFIG_PATH: magento/ansible
          STACK_PATH: ansible

      - task: run-ansible
        <<: *run-ansible-from-bastion
        params:
          AWS_ACCESS_KEY_ID: ((aws_access_key))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
          MAGENTO_DEPLOY_BUCKET_NAME: ((magento_deploy_bucket_name))
          MAGENTO_DEPLOY_BUCKET_OBJECT_PATH: ((magento_deploy_bucket_object_path))
          MAGENTO_DEPLOY_BUCKET_REGION: ((aws_default_region))
          BASTION_URL: ((bastion_url))
          BASTION_PRIVATE_KEY: ((bastion_private_key_pair))
          ANSIBLE_VAULT_PASSWORD: ((ansible_vault_password))
          ANSIBLE_PLAYBOOK_PATH: ansible-playbook
          ANSIBLE_PLAYBOOK_NAME: magento.yml
          EXTRA_VARS:
            customer: ((customer))
            project: ((project))
            env: ((env))


  - name: app-deploy-front
    build_logs_to_retain: 10
    plan:
    - do:

      - get: stack-magento-ansible
        trigger: false
        passed:
          - full-deploy-front

      - get: catalog-config-ansible
        trigger: false
        passed:
          - full-deploy-front

      - get: terraform-magento-((env))
        trigger: false
        passed:
          - full-deploy-front

      - get: magento-release
        trigger: true
        passed: [unittests]
      - get: magento-code
        trigger: false
        passed: [unittests]

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: catalog-config-ansible
            path: "config"
          - name: stack-magento-ansible
            path: "stack"
          - name: terraform-magento-((env))
            path: "terraform"
        params:
          CONFIG_PATH: magento/ansible
          STACK_PATH: ansible

      - task: run-ansible
        <<: *run-ansible-from-bastion
        params:
          AWS_ACCESS_KEY_ID: ((aws_access_key))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
          MAGENTO_DEPLOY_BUCKET_NAME: ((magento_deploy_bucket_name))
          MAGENTO_DEPLOY_BUCKET_OBJECT_PATH: ((magento_deploy_bucket_object_path))
          MAGENTO_DEPLOY_BUCKET_REGION: ((aws_default_region))
          BASTION_URL: ((bastion_url))
          BASTION_PRIVATE_KEY: ((bastion_private_key_pair))
          ANSIBLE_VAULT_PASSWORD: ((ansible_vault_password))
          ANSIBLE_PLAYBOOK_PATH: ansible-playbook
          ANSIBLE_PLAYBOOK_NAME: magento.yml
          EXTRA_VARS:
            customer: ((customer))
            project: ((project))
            env: ((env))
          TAGS:
            - deploy

  - name: functional-tests
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
    - do:
      - get: magento-release
        trigger: true
        passed: [app-deploy-front]
      - get: magento-code
        passed: [app-deploy-front]
        trigger: false


      - task: run
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/busybox
              tag: latest
          run:
            path: /bin/bash
            args:
            - -xec
            - |
              DIR=${PWD}
              echo "Dummy functional tests OK"
